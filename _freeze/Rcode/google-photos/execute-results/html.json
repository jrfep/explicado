{
  "hash": "91d7cc6d49b355640e7bf8cc95bb9f5e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Google photos\"\nauthor: \"José R. Ferrer-Paris\"\ndate: 01 Jul 2024\nimage: img/ADX0-Desayuno-en-Oaxaca.jpg\ncategories:\n - Google cloud\n - Photos\n - magick\n - Mexico\nexecute: \n  echo: true\n---\n\n\n## What I want to do\n\nMy aim is to create a local copy of my photos in Google Photos to be able to use them in my Quarto Website. I choose to use R for this.\n\n## Challenges\n\nThis is the kind of thing that works great when it works, but that can enter an infinite loop of trial-and-error if you miss a tiny, vital detail. \n\nSometimes the procedure has been described in detail in older posts, but specific configurations or methods have changed since. So it is important to understand what is needed and to adapt the steps according to the most recent documentation.\n\n## Sources\n\nMy code is based on on [some blogs](https://www.listendata.com/2021/10/r-wrapper-for-google-photos-api.html), [medium posts](https://max-coding.medium.com/loading-photos-and-metadata-using-google-photos-api-with-python-7fb5bd8886ef) and [stack overflow posts](https://stackoverflow.com/questions/50573196/access-google-photo-api-with-python-using-google-api-python-client) describing the procedure for R and Python.\n\n## Set-up Google authentication\n\nThese are the basic steps:\n\n1. create a project in [google cloud](https://console.cloud.google.com/), and open the `APIS y servicios` tab (or equivalent in your language) \n2. enable Photos Library API (not sure if this is relevant here),\n3. configure a simple consent page (`Pantalla de consentimiento`), publishing status can be \"Testing\",\n4. create an OAuth 2.0 client ID and download the json file.\n5. add `GC_PROJECT_EMAIL` and `GC_PROJECT_CRED_JSON` to a `.Renviron` file\n\n\n## Steps in R\n\n### Load the libraries\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gargle)\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'dplyr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(jsonlite)\nlibrary(httr)\nlibrary(foreach)\nlibrary(stringr)\nlibrary(magick)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLinking to ImageMagick 6.9.12.93\nEnabled features: cairo, fontconfig, freetype, heic, lcms, pango, raw, rsvg, webp\nDisabled features: fftw, ghostscript, x11\n```\n\n\n:::\n:::\n\n\n### Read environment variables\n\nMake sure to update the `.Renviron` file, then you can (re-)load it in the current R session with:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreadRenviron(\"~/.Renviron\")\n```\n:::\n\n\n### Read credentials and authenticate\n\nThe credentials are in a json file in a private folder, the environment variable contains this location. Now we can check if the file exists, and read it:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncred_json <- Sys.getenv(\"GC_PROJECT_CRED_JSON\")\nif (!file.exists(cred_json)) {\n  stop(\"credentials not found, please update Renviron file\")\n} else {\n  clnt <- gargle_oauth_client_from_json(path=cred_json)\n}\n```\n:::\n\n\nYou can print the client information with:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(clnt)\n```\n:::\n\n\n:::{.aside}\nOutput not shown\n:::\n\nNow fetch the token: \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntkn <- gargle2.0_token(\n  email = Sys.getenv(\"GC_PROJECT_EMAIL\"),\n  client = clnt,\n  scope = c(\"https://www.googleapis.com/auth/photoslibrary.readonly\",\n            \"https://www.googleapis.com/auth/photoslibrary.sharing\")\n)\n```\n:::\n\n\n:::{.callout-warning}\n# This step is important! \nIn an interactive session, this will open a tab/window in the browser to complete authentication and confirm permissions for the app. It might use information in the cache, if available.\n\nIf this is run non-interactively, it will try to use the information in the cache, but will fail if this info is stale.\n:::\n\nFinal steps of authentication:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nk <- token_fetch(token=tkn)\nauthorization = paste('Bearer', k$credentials$access_token)\n```\n:::\n\n\n### Album information\n\nNow we can get the album information using function `GET`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngetalbum <-\n  GET(\"https://photoslibrary.googleapis.com/v1/albums\",\n      add_headers(\n        'Authorization' = authorization,\n        'Accept'  = 'application/json'),\n      query = list(\"pageSize\" = 50)) |> \n  content( as = \"text\", encoding = \"UTF-8\") |>\n  fromJSON() \n```\n:::\n\n\nHere I use `select` to show only two columns:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::kable(\n    select(\n        getalbum$albums, \n        c(\"title\", \"mediaItemsCount\")))\n```\n\n::: {.cell-output-display}\n\n\n|title                     |mediaItemsCount |\n|:-------------------------|:---------------|\n|Eventos - RLE             |15              |\n|logos para la web         |3               |\n|Lugares - México          |40              |\n|libros viajeros           |33              |\n|Lugares - España          |11              |\n|Lugares - Europa          |23              |\n|rompecabeza               |2               |\n|Eventos - CEBA LEE        |22              |\n|Lugares - Sur América     |14              |\n|Lugares - Venezuela       |3               |\n|Eventos - Venezuela       |4               |\n|Eventos - Mariposas       |10              |\n|40 años de Chinco y Betty |18              |\n|Nuestro año sudafricano   |9               |\n|mayo en Ciudad del Cabo   |14              |\n|30 de abril de 2012       |1               |\n|Verano en Ciudad del Cabo |6               |\n|Drop Box                  |4               |\n|Diciembre2009             |762             |\n|FotosNietos               |826             |\n|Eventos - IVIC            |7               |\n\n\n:::\n:::\n\n\nIf there are multiple pages per query, it is possible to use the `nextPageToken` to paginate the results:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (!is.null(getalbum$nextPageToken)) {\n  getalbum2 <-\n    GET(\"https://photoslibrary.googleapis.com/v1/albums\",\n      add_headers(\n        'Authorization' = authorization,\n        'Accept'  = 'application/json'),\n      query = list(\"pageToken\" = getalbum$nextPageToken)) |>\n    content(as = \"text\", encoding = \"UTF-8\") |>\n    fromJSON() \n}\n```\n:::\n\n\n### Fotos in an album\n\nIf we want to pull information from one album:\n\n\n::: {.cell}\n\n```{.r .cell-code}\naID <- filter(getalbum$albums,\n    title %in% c(\"Lugares - México\")) |>\n    pull(id)\n\ndts <-  POST(\"https://photoslibrary.googleapis.com/v1/mediaItems:search\",\n      add_headers(\n        'Authorization' = authorization,\n        'Accept'  = 'application/json'),\n      body = list(\"albumId\" = aID,\n                  \"pageSize\" = 50),\n      encode = \"json\"\n      ) |> \n    content( as = \"text\", encoding = \"UTF-8\") |>\n    fromJSON( flatten = TRUE) |> \n    data.frame()\n```\n:::\n\n\nLet's have a glimpse at the data frame\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(dts)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 40\nColumns: 15\n$ mediaItems.id                                  <chr> \"ADXhca0hTz4W4UNe2bCvXA…\n$ mediaItems.description                         <chr> \"Desayuno en Oaxaca\", \"…\n$ mediaItems.productUrl                          <chr> \"https://photos.google.…\n$ mediaItems.baseUrl                             <chr> \"https://lh3.googleuser…\n$ mediaItems.mimeType                            <chr> \"image/jpeg\", \"image/jp…\n$ mediaItems.filename                            <chr> \"Desayuno-Oaxaca.jpg\", …\n$ mediaItems.mediaMetadata.creationTime          <chr> \"2005-11-11T09:01:05Z\",…\n$ mediaItems.mediaMetadata.width                 <chr> \"480\", \"640\", \"640\", \"6…\n$ mediaItems.mediaMetadata.height                <chr> \"640\", \"480\", \"480\", \"4…\n$ mediaItems.mediaMetadata.photo.cameraMake      <chr> \"KONICA MINOLTA \", \"KON…\n$ mediaItems.mediaMetadata.photo.cameraModel     <chr> \"DiMAGE Z3\", \"DiMAGE Z3…\n$ mediaItems.mediaMetadata.photo.focalLength     <dbl> 5.859375, 5.859375, 69.…\n$ mediaItems.mediaMetadata.photo.apertureFNumber <dbl> 6.3, 5.0, 4.5, 8.0, 6.3…\n$ mediaItems.mediaMetadata.photo.isoEquivalent   <int> 50, 50, 50, 50, 50, 50,…\n$ mediaItems.mediaMetadata.photo.exposureTime    <chr> \"0.004999999s\", \"0.0099…\n```\n\n\n:::\n:::\n\n\nWe downloaded the information for all fotos. The baseUrl links are useful during the R session, but are not good for sharing the links to the photos. They are random urls and become defunct after the session is closed. \n\nFor example, this will display the image using the baseUrl when rendering this page, but will eventually disappear:\n\n\n::: {.cell fenced='true'}\n\n```{.r .cell-code}\ncat(sprintf(\"<img src='%s'/>\", \n    dts[23,\"mediaItems.baseUrl\"]))\n```\n\n<img src='https://lh3.googleusercontent.com/lr/AAJ1LKeh8R2-SPtx9oHlaAJfh2VQhFfFPig6WHa_B4VGH8MEyV7rP99dzbb2aJ2fVfR8vUhGlY5iUpw-swtNWFVMB18M4TsTWsn7dh9OKXKsthrfc72Ejlpt0_8ERV8paj0y3IZfIP9YoeshdXBRN1rWaFYbbJbDiDSs-WF_RUHnUmdtGIkAliK1O74fymhU53sFLAECK6Q6jxXW0Yj8gZrbDnlU5_9z0-d3aPpaTzI6r7hDoVxmh6RwR4L0I8hWmf2fqZ7nYihDSbIzB8QO_TdwElJ0Fqz-Gquxc0WqDJct29z72JV4mKggS7atKgh1i7_RYdS9Hni5Ubkg85ic7K76HCZSMHkOaX44aKX1Jq45U5D1rGw7lvCxudtBypCML-IGqcQMUXaniiTz4aQCipwhvomPSa63nF7XpCuIc-ZapZm3uF98MolgU7-V7BE7_hxUZPCFkhM69pydy90P68jXJyYd8bpqUvFIYqE_XPzniP2c0-fPy6ze7z_px2IFsfhaJTgtIaTAd3R2aXVewW3zzAlAQi_ACdiewc_mvAYTTSX3ZqPRQqbyqByNqAzXD6b5GSYk-baln6s9_aG66PUqiyNFqTzV5NfOC9stRPHZDT68CAVbRiyKs001H6M7_k7ujrcnFRqfkcQwRO5cw2itTXJxOaVQ1l0RwQMyNkLa3pxk1ujLg2Gc2QxueLH2YeAhxraRwCckXfK8pXEZyjievASXD9tD4DBFxCNZX9P6NyeWrpMvZtKSy-wWcPLvYLT6x-d0BpOaLT2yxc-46LF92OMUGq6dGMCrB26vihmdc0A0wS6277h3crp8_vHkluuN1pMon5TOZOtNL0U-hf0GZihDNSzUJ9yduawFgfGvhh4OXo0Icpvt2mqgOjPQtbcCQJUuaCMMo95Uilr1H5sZnQCPyiPIQW78OQqcUCHZPIELRfYR58FFMUIQq-0KLdmLXDBwWGfCxjnsugIQRWj8onHdxbV7vubiMMiua6whCdcBlLSloqmBs_nDEbfGYPBa4e84WcFmR8UtIfxqoYQ18aoOIuEjm1cptgLR'/>\n:::\n\n\nBut this link will still be valid:\n\n\n::: {.cell fenced='true'}\n\n```{.r .cell-code}\ncat(sprintf(\"View _%1$s_ in its [Google Photos album](%2$s){target='gphotos'}\", \n    dts[23, \"mediaItems.description\"],\n    dts[23,\"mediaItems.productUrl\"]))\n```\n\nView _Estela en Palenque_ in its [Google Photos album](https://photos.google.com/lr/album/ADXhca0xFF1Hb4RypxgfvkkAi2Hwh0nOsD37CiQrcVTTon4J5I4lu7b67ko60PWmWufjBt6onvbi/photo/ADXhca31fLozl2gRe_hlgl867SWuTQVqAmac58hbrp8fEWJ5qCQc4rpg9SsBXeuB-UDqsj_nATCIaIkH0PSuJD3BbSHXAjIYAA){target='gphotos'}\n:::\n\n\n\n#### Keeping a persistent version\n\nOne way to share the photos is by selecting existing files, [creating shareable albums with the API](https://developers.google.com/photos/library/guides/share-media#rest) and downloading the shareableURL of the album and photos. I still haven't worked out the code for doing that in R.\n\nAnother option is to just download the photos in the size needed for the session/website and share the `productUrl` to link back to the Google photos page for the image.\n\nFor example we can visualise one photo with the `image_read` function in the `magick` library using the `baseUrl` attribute:\n\n\n::: {.cell}\n\n```{.r .cell-code}\noaxaca <- image_read(dts[1,\"mediaItems.baseUrl\"])\nprint(oaxaca)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 7\n  format width height colorspace matte filesize density\n  <chr>  <int>  <int> <chr>      <lgl>    <int> <chr>  \n1 JPEG     384    512 sRGB       FALSE    91613 72x72  \n```\n\n\n:::\n\n::: {.cell-output-display}\n![](google-photos_files/figure-html/unnamed-chunk-14-1.png){width=192}\n:::\n:::\n\n\nOr, we can download the image to an accessible folder. First we create the folder:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhere::i_am(\"Rcode/google-photos.qmd\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nhere() starts at /Users/z3529065/proyectos/personal/explicado\n```\n\n\n:::\n\n```{.r .cell-code}\nimg_folder <- here::here(\"Rcode\",\"img\")\nif (!dir.exists(img_folder))\n  dir.create(img_folder)\n```\n:::\n\n\nNow we use `download.file` to trigger the download if the file does not exist yet.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nphoto <- slice(dts,16)\n\ndurl <- sprintf(\"%s=w400-h400-d\", \n    photo$mediaItems.baseUrl)\ndfile <- sprintf(\"%s-%s.jpg\", \n    abbreviate(photo$mediaItems.id), str_replace_all(photo$mediaItems.description, \n        \"[ ,/]+\", \"-\"))\n\nif (!file.exists(dfile))\n    download.file(url = durl, \n    destfile = here::here(img_folder, dfile))\n```\n:::\n\n\nThe downloaded image is now available locally:\n\n\n::: {.cell fenced='true'}\n\n```{.r .cell-code}\ncat(sprintf(\"![View _%1$s_ in its [Google Photos album](%2$s){target='gphotos'}](img/%3$s)\", \n    photo$mediaItems.description,\n    photo$mediaItems.productUrl,\n    dfile\n    ))\n```\n\n![View _Visita a Palenque_ in its [Google Photos album](https://photos.google.com/lr/album/ADXhca0xFF1Hb4RypxgfvkkAi2Hwh0nOsD37CiQrcVTTon4J5I4lu7b67ko60PWmWufjBt6onvbi/photo/ADXhca0ad5Yw3NP_fhzbVX6xl50cWUPydmWLAkJKELpEMnf1k8sZn8-C2_uxk_-HTOinEMKk695sss8jTwezQTpNxfhjcvRB8A){target='gphotos'}](img/ADX0-Visita-a-Palenque.jpg)\n:::\n\n\n### Multiple fotos in multiple albums\n\nWe can select multiple ids from multiple albums\n\n\n::: {.cell}\n\n```{.r .cell-code}\nalbum_info <- getalbum$albums %>% select(id, title)\n\nlugares <- c(\"Lugares - México\", \"Lugares - Europa\", \"Lugares - Sur América\", \"Eventos - Venezuela\")\n\neventos <- c(\"Eventos - CEBA LEE\", \"Eventos - RLE\", \"Eventos - Venezuela\", \"Eventos - Mariposas\", \"Eventos - IVIC\")\n\naIDs <- album_info |> filter(title %in% c(lugares, eventos)) |> pull(id)\n```\n:::\n\n\nAnd use foreach to run an efficient loop:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nphotos <- foreach(aID=aIDs, .combine = \"bind_rows\") %do% {\n  dts <-  POST(\"https://photoslibrary.googleapis.com/v1/mediaItems:search\",\n      add_headers(\n        'Authorization' = authorization,\n        'Accept'  = 'application/json'),\n      body = list(\"albumId\" = aID,\n                  \"pageSize\" = 50),\n      encode = \"json\"\n      ) |> \n    content( as = \"text\", encoding = \"UTF-8\") |>\n    fromJSON( flatten = TRUE) |>\n    data.frame()\n  dts$album <- album_info |> \n    filter(id %in% aID) |> pull(title)\n  dts <- dts |> \n    mutate(\n      output_file = str_replace_all(mediaItems.description, \"[ ,/]+\", \"-\"),\n      output_id = abbreviate(mediaItems.id))\n  dts \n}\n```\n:::\n\n\nLook how many photos we have now!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(photos)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 135\nColumns: 18\n$ mediaItems.id                                  <chr> \"ADXhca1KacJZA43EjYWu9f…\n$ mediaItems.description                         <chr> \"Visita al IUCN Conserv…\n$ mediaItems.productUrl                          <chr> \"https://photos.google.…\n$ mediaItems.baseUrl                             <chr> \"https://lh3.googleuser…\n$ mediaItems.mimeType                            <chr> \"image/jpeg\", \"image/jp…\n$ mediaItems.filename                            <chr> \"F9FC0766-5A4D-4E2F-A92…\n$ mediaItems.mediaMetadata.creationTime          <chr> \"2018-06-26T06:44:48.29…\n$ mediaItems.mediaMetadata.width                 <chr> \"1024\", \"1024\", \"1024\",…\n$ mediaItems.mediaMetadata.height                <chr> \"768\", \"768\", \"768\", \"1…\n$ mediaItems.mediaMetadata.photo.cameraMake      <chr> \"Apple\", \"Apple\", \"Appl…\n$ mediaItems.mediaMetadata.photo.cameraModel     <chr> \"iPhone 5s\", \"iPhone 5s…\n$ mediaItems.mediaMetadata.photo.focalLength     <dbl> 2.150000, 4.150000, 4.1…\n$ mediaItems.mediaMetadata.photo.apertureFNumber <dbl> 2.4, 2.2, 2.2, 2.2, 2.2…\n$ mediaItems.mediaMetadata.photo.isoEquivalent   <int> 50, 50, 40, 40, 100, 40…\n$ mediaItems.mediaMetadata.photo.exposureTime    <chr> \"0.002183406s\", \"0.0099…\n$ album                                          <chr> \"Eventos - RLE\", \"Event…\n$ output_file                                    <chr> \"Visita-al-IUCN-Conserv…\n$ output_id                                      <chr> \"ADX1K\", \"ADX2S\", \"ADX3…\n```\n\n\n:::\n:::\n\n\nWe can store this information in a `rds` file, but remember the `baseUrl` wont be valid next time we need them:\n\n::: {.cell}\n\n```{.r .cell-code}\nfile_name <- here::here(\"data\",\"google-photos.rds\")\nsaveRDS(file=file_name, photos)\n```\n:::\n\n\nIn the loop above we added some extra steps to create local file names so that we can locate the files and re-use them in our website:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (i in seq(along=photos$mediaItems.id)) {\n  photo <- photos %>% slice(i)\n  durl <- sprintf(\"%s=w400-h400-d\", photo$mediaItems.baseUrl)\n  dfile <- sprintf(\"%s/%s-%s.jpg\",img_folder, photo$output_id, photo$output_file)\n  if (!file.exists(dfile))\n    download.file(url=durl, destfile=dfile)\n}\n```\n:::\n\n\n\n## That's it!\n\nI think this code is now ready for using and reusing in other quarto- and R-projects.\n\nCheers!",
    "supporting": [
      "google-photos_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}